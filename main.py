from dotenv import load_dotenv
import aiobot.handlers.commands as commands
import aiobot.handlers.user as user
import aiobot.handlers.ad as ad
import aiobot.handlers.admin as admin
import asyncio
import logging
from dispatcher.dispatcher import dis, bot
from aiobot.database import db
import threading
import os
from datetime import datetime
import sys

logging.basicConfig(level=logging.INFO)

load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
def check_single_instance():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    import socket
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind(('localhost', 8081))  # –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ")
        return True
    except OSError:
        print("[ERROR] –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        return False

# –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ .env –±–µ–∑ python-dotenv
# import os
# try:
#     with open('.env', 'r') as f:
#         for line in f:
#             if '=' in line and not line.startswith('#'):
#                 key, value = line.strip().split('=', 1)
#                 os.environ[key] = value.strip('"').strip("'")
# except FileNotFoundError:
#     pass

def run_fake_server():
    import http.server
    import socketserver

    port = int(os.environ.get("PORT", 8080))
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", port), Handler) as httpd:
        print(f"Serving fake HTTP on port {port}")
        httpd.serve_forever()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
async def keep_alive():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    admin_id = 1501361138  # –í–∞—à ID –≤ Telegram
    while True:
        try:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message = f"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –í—Ä–µ–º—è: {current_time}\n‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            await bot.send_message(admin_id, message)
            print(f"[KEEP_ALIVE] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {current_time}")
        except Exception as e:
            print(f"[KEEP_ALIVE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ (1 –º–∏–Ω—É—Ç—É)
        await asyncio.sleep(60)


dis.include_router(commands.router)
dis.include_router(ad.router)
dis.include_router(user.router)
dis.include_router(admin.router)


async def on_startup():
    await db.init()
    # await db.drop_all()
    await db.create_all()


async def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if not check_single_instance():
        print("[ERROR] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        sys.exit(1)
    
    await on_startup()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_fake_server, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    asyncio.create_task(keep_alive())
    
    # –î–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ webhook (—Å–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∏–∂–µ)
    # await dis.start_webhook(
    #     bot,
    #     webhook_path="/webhook",
    #     webhook_url="https://yourdomain.com/webhook",
    # )
    print("[INFO] Bot started in polling mode (for dev/testing)")
    await dis.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
